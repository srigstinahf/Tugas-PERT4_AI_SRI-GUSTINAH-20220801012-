# -*- coding: utf-8 -*-
"""Sri gustinah(20220801012)_TUGAS AI PERT4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19KtfjcTvQhtd5ePcbV1ZZUJ2wRzU_o83

upload File ke google colab
"""

from google.colab import files

# This will prompt you to upload a file
uploaded = files.upload()

"""Read the CSV file"""

import pandas as pd

# Read the uploaded CSV file
df = pd.read_csv('student-mat.csv')

# Display the first few rows of the dataset
df.head()

"""Checking Data"""

# Check for missing values
df.isnull().sum()

# Get basic statistics of the dataset
df.describe()

# Get information about the dataset
df.info()

"""Import Library"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

# Baca dataset
df = pd.read_csv('student-mat.csv')

# Lihat beberapa baris pertama dari dataset
df.head()

"""Processing Data"""

# Cek missing values
print(df.isnull().sum())

# Encode variabel kategorikal
label_encoder = LabelEncoder()
categorical_cols = df.select_dtypes(include=['object']).columns

for col in categorical_cols:
    df[col] = label_encoder.fit_transform(df[col])

    # Tampilkan beberapa baris pertama dataset setelah encoding
    df.head()

"""Pisahkan Data"""

# Pisahkan fitur dan target
X = df.drop(columns=['G3'])  # Misalkan kita ingin memprediksi kolom 'G3' (nilai akhir)
y = df['G3']

# Bagi data menjadi data pelatihan dan pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Lihat ukuran data
print(f'Training data shape: {X_train.shape}')
print(f'Test data shape: {X_test.shape}')

"""Train Model (Random Forest)"""

# Inisialisasi model Random Forest
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Latih model
rf_model.fit(X_train, y_train)

"""Evaluasi Model"""

# Prediksi pada data pengujian
y_pred = rf_model.predict(X_test)

# Evaluasi model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

"""Interpretasi Hasil:
Jika nilai Mean Squared Error (MSE) rendah dan nilai R-squared (RÂ²) mendekati 1, itu berarti model memiliki performa yang baik.

**Membuat** **Diagram** **Scatter** **Plot** **dan** **Residual** **Plot**

**Scatter** **Plot**: Diagram ini menampilkan nilai asli (sumbu y) terhadap nilai prediksi (sumbu x). Garis merah diagonal menunjukkan garis ideal jika prediksi benar-benar sama dengan nilai asli. Jika titik-titik data mendekati garis ini, model memiliki akurasi yang baik.

**Residual** **Plot**: Diagram ini menggambarkan perbedaan (residuals) antara nilai prediksi dan nilai asli terhadap nilai prediksi. Garis horizontal di 0 menunjukkan tidak ada kesalahan. Penyebaran titik yang acak menunjukkan bahwa model tidak memiliki pola sistematis dalam kesalahannya.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Scatter plot: Nilai asli vs Nilai prediksi
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.title('Actual vs Predicted Values')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.show()

# Residual plot: Residuals (error) vs Nilai prediksi
residuals = y_test - y_pred
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_pred, y=residuals, color='purple', alpha=0.6)
plt.axhline(0, color='red', linestyle='--')
plt.title('Residuals vs Predicted Values')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.show()